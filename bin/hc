#!/usr/bin/env python
try:
    def cmd_convert(args):
        from hipscat.cmdline import cmd_import
        cmd_import(args)

    def cmd_import(args):
        from hipscat.cmdline import cmd_import
        cmd_import(args)

    def main():
        import argparse
        from hipscat.fastutil import available_cores

        parser = argparse.ArgumentParser(description='HiPS Catalog Utility', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        parser.add_argument('-j', '--cores', metavar='N', dest='ncores', default=available_cores(), type=int, help='Number of cores to use')
        subparsers = parser.add_subparsers(help='Available subcommands')
        parser.set_defaults(func=lambda args: parser.error("too few arguments"))

        import_cmd = subparsers.add_parser('convert', help='convert a batch of files between formats')
        import_cmd.set_defaults(func=cmd_convert)
        import_cmd.add_argument('output', type=str, help='output directory for the converted files')
        import_cmd.add_argument('inputs', metavar='input', type=str, nargs='+', help='input files')

        import_cmd = subparsers.add_parser('import', help='import a HiPS catalog')
        import_cmd.set_defaults(func=cmd_import)
        import_cmd.add_argument('output', type=str, help='output HiPS catalog directory')
        import_cmd.add_argument('inputs', metavar='input', type=str, nargs='+', help='input files')
        import_cmd.add_argument('-k', '--counts-map-order', metavar='K', dest='k', default=10, type=int, help='Healpix order of the counts map')
        import_cmd.add_argument('-t', '--partition-size-threshold', metavar='N', dest='threshold', default=10, type=int, help='Maximum number of records in a partition before it\'s split.')
        import_cmd.add_argument('--lon', default='ra', type=str, help='Longitude column in the input files')
        import_cmd.add_argument('--lat', default='dec', type=str, help='Latitude column in the input files')

        args = parser.parse_args()
        exit(args.func(args))

    if __name__ == "__main__":
        main()

except KeyboardInterrupt:
    print("\nCTRL-C received. Exiting.")

    # HACK: this prevents tqdm from printing out another progressbar
    # I suspect tqdm's background thread does this before it's killed...
    import sys
    sys.stderr.close()
